raw.data <- read.csv(unz("C:/Users/Steve/Documents/Coursera Documents/Reproducible/Assignment 1/RepData_PeerAssessment1/activity.zip","activity.csv"))
sessioninfo()
sessionInfo()
?dt
(-50:50)/25
plot((-50:50)/25,dt((-50:50)/25,20))
plot((-50:50)/25,dt((-50:50)/25,2))
plot((-50:50)/25,dt((-50:50)/25,.125))
plot((-50:50)/25,dt((-50:50)/25,125))
plot((-50:50)/25,dt((-50:50)/25,15))
plot((-50:50)/25,log(dt((-50:50)/25,15))
)
plot((-50:50)/25,log(dt((-50:50)/25,1)))
plot((-50:50)/25,log(dt((-50:50)/25,10)))
plot((-50:50)/25,log(dt((-50:50)/25,100)))
plot((-50:50)/25,log(qt((-50:50)/25,100)))
plot((-50:50)/25,qt((-50:50)/25,100))
plot((-50:50)/25,qnorm((-50:50)/25,100))
plot((-50:50)/25,qnorm((-50:50)/25))
plot((-50:50)/25,pt((-50:50)/25,100))
plot((-50:50)/25,pt((-50:50)/25,10))
plot((-50:50)/25,pt((-50:50)/25,1))
qt(0.975,8)
1100+c(-1,1)*qt(0.975,8)*10
6/(qt(0.975,8))
?ttest
??ttest
2+c(-1,1)*qt(0.975,18)*sqrt(0.68/10)
-2+c(-1,1)*qt(0.975,18)*sqrt(0.68/10)
-2+c(-1,1)*qt(0.975,18)*sqrt(0.6/10)
-2+c(-1,1)*qnorm(0.975)*sqrt(0.6/10)
-2+c(-1,1)*qnorm(0.975)*sqrt(0.5/100)
rexp(5,.2)
?rexp
set.seed(356)
?set.seed
results <-array(0,dim=c(40,1000))
?apply
for(i in (1:40))  {}
results <-array(rexp(40000,0.2),dim=c(40,1000))
apply(results, 2, mean)
apply(results, 1, mean)
hist(apply(results,1,mean))
hist(apply(results,2,mean))
mean(apply(results,2,mean))
sd(apply(results,2,mean))
mean(apply(results,2,sd))
?hist
hist(apply(results,2,mean),50)
plot(apply(results,2,mean))
hist(apply(results,2,mean),100)
?abline
abline(v=mean(apply(results,2,mean)))
?rnorm
lines(rnorm(x,4.990985,4.925101))
lines(rnorm((21:56)/7,4.990985,4.925101))
lines(pnorm((21:56)/7,4.990985,4.925101))
lines(50*pnorm((21:56)/7,4.990985,4.925101))
lines(50*pnorm((21:56)/7,4.990985,4.925101/sqrt(1000)))
lines(50*pnorm((21:56)/7,mean=4.990985,sd=4.925101/sqrt(1000)))
lines(50*dnorm((21:56)/7,mean=4.990985,sd=4.925101/sqrt(1000)))
(21:56)/7
plot(dnorm((21:56)/7,5,5))
plot(100*dnorm((21:56)/7,5,5))
?hist
hist(apply(results,2,mean),100,freq=FALSE)
hist(apply(results,2,mean),freq=FALSE)
hist(apply(results,2,mean),1000,freq=FALSE)
hist(apply(results,2,mean),1000,freq=TRUE)
hist(apply(results,2,mean))
hist(apply(results,2,mean))/1000
plot(hist(apply(results,2,mean))/1000)
a<-hist(apply(results,2,mean))
?a
a
hist(apply(results,2,mean))
lines(1000*dnorm((21:56)/7,mean=4.990985,sd=4.925101)
)
lines(1000*pnorm((21:56)/7,mean=4.990985,sd=4.925101))
plot(1000*pnorm((21:56)/7,mean=4.990985,sd=4.925101))
plot(1000*dnorm((21:56)/7,mean=4.990985,sd=4.925101))
plot((21:56/7,1000*dnorm((21:56)/7,mean=4.990985,sd=4.925101))
plot((21:56)/7,1000*dnorm((21:56)/7,mean=4.990985,sd=4.925101))
hist(apply(results,2,mean))
lines((30:80)/10,1000*dnorm((30:80)/10,mean=4.990985,sd=4.925101))
lines((30:80)/10,1000*dnorm((30:80)/10,mean=4.990985,sd=4.925101/sqrt(1000)))
lines((30:80)/10,dnorm((30:80)/10,mean=4.990985,sd=4.925101/sqrt(1000)))
lines((30:80)/10,20*dnorm((30:80)/10,mean=4.990985,sd=4.925101/sqrt(1000)))
lines((30:80)/10,200*dnorm((30:80)/10,mean=4.990985,sd=4.925101/sqrt(1000)))
lines((30:80)/10,100*dnorm((30:80)/10,mean=4.990985,sd=4.925101/sqrt(1000)))
lines((30:80)/10,100*dnorm((30:80)/10,mean=4.990985,sd=4.925101/sqrt(40)))
lines((30:80)/10,400*dnorm((30:80)/10,mean=4.990985,sd=4.925101/sqrt(40)))
lines((30:80)/10,500*dnorm((30:80)/10,mean=4.990985,sd=4.925101/sqrt(40)))
lines((30:80)/10,450*dnorm((30:80)/10,mean=4.990985,sd=4.925101/sqrt(40)))
hist(apply(results,2,mean))
lines((30:80)/10,450*dnorm((30:80)/10,mean=4.990985,sd=4.925101/sqrt(40)))
abline(v=mean(apply(results,2,mean)))
plot(0:10,dexp(0:10,0.2))
plot(0:10,dexp(0:10,0.2),Title = "Exponential Distribution")
plot(0:10,dexp(0:10,0.2),title = "Exponential Distribution")
warnings()
plot
?plot
plot(0:10,dexp(0:10,0.2),main = "Exponential Distribution")
plot(0:10,dexp(0:10,0.2),main = "Exponential Distribution",type = "b")
plot(0:10,dexp(0:10,0.2),main = "Exponential Distribution",type = "l")
plot(0:10,dexp(0:10,0.2),main = "Exponential Distribution",type = "l",xlab = "x",ylab = "dexp(x,0.2)")
plot(0:10,dexp(0:10,0.2),
main = "Exponential Distribution",
type = "l",
xlab = "x",
ylab = "dexp(x,0.2)"
)
hist(results)
hist(results,freq = FALSE)
plot(0:10,dexp(0:10,0.2),
main = "Exponential Distribution",
type = "l",
xlab = "x",
ylab = "dexp(x,0.2)"
)
hist(rexp(50000,0.2),freq = FALSE)
hist(rexp(50000,0.2),100,freq = FALSE)
line(0:50,dexp(0:50,0.2),
main = "Exponential Distribution",
type = "l",
xlab = "x",
ylab = "dexp(x,0.2)"
)
line(0:50,dexp(0:50,0.2))
line(dexp(0:50,0.2))
lines(dexp(0:50,0.2))
hist(results,freq = FALSE)
lines(dexp(0:50,0.2))
?hist
ToothGrowth
a<-ToothGrowth
levels(a[,2])
levels(a[,2:3])
levels(a[,3])
plot(a[a[,3]==2.0 & a[,2]=="OJ",1])
?levels
nlevels(a[,3])
nlevels(a[,2])
factor(a[,3])
factor(a[,2:3])
factor(a[,2])
levels(factor(a[,2]))
levels(factor(a[,3]))
factor(a[,2])*3+factor(a[,3])
levels(a[,2])*3+levels(a[,3])
rep(1:4,2)
rep(1:4,eacj = 2)
rep(1:4,each = 2)
rep(1:6,each = 10)
a[,4]<-rep(1:6,each = 10)
?lapply
tapply(a,levels(a[,4]),mean)
tapply(a,as.factor(a[,4]),mean)
tapply(a[,1],as.factor(a[,4]),mean)
tapply(a[,1],as.factor(a[,4]),sd)
tapply(a[,1],as.factor(a[,4]),sd)/sqrt(10)
tapply(a[,1],as.factor(a[,4]),sd)/sqrt(10-1)
tapply(a[,1],as.factor(a[,4]),mean_se)
tapply(a[,1],as.factor(a[,4]),sd)/sqrt(10-1)
as.factor(a[,2])
int(as.factor(a[,2]))
as.numeric(as.factor(a[,2]))
as.numeric(as.factor(a[,3]))
tapply(a[,1],as.numeric(as.factor(a[,2])),sd)/sqrt(10-1)
tapply(a[,1],as.numeric(as.factor(a[,2]))&as.numeric(as.factor(a[,3])),sd)/sqrt(10-1)
tapply(a[,1],as.numeric(as.factor(a[,2]))|as.numeric(as.factor(a[,3])),sd)/sqrt(10-1)
a<-ToothGrowth
data<-ToothGrowth
nlevels(data)
nlevels(data[,1])
nlevels(data[,2])
nlevels(data[,3])
nlevels(as.factor(data[,3]))
nlevels(as.factor(data[,1]))
?split
cut(data[,3],breaks=3)
cut(data[,3],breaks=c(0,0.75,1.5))
cut(data[,3],breaks=c(0,0.75,1,2))
tapply(data,cut(data[,3],breaks=c(0,0.75,1,2)),mean)
tapply(data,as.factor(cut(data[,3],breaks=c(0,0.75,1,2))),mean)
tapply(data[,1],as.factor(cut(data[,3],breaks=c(0,0.75,1,2))),mean)
?as.dactor
?as.factor
tapply(data[,1],as.factor(data[,3]),mean)
tapply(data[,1],as.factor(data[,3]) ~ as.factor(data[,2]),mean)
tapply(data[,1],as.factor(data[,3]) && as.factor(data[,2]),mean)
tapply(data[,1],as.factor(data[,3]) & as.factor(data[,2]),mean)
tapply(data[,1],as.factor(data[,3]) + as.factor(data[,2]),mean)
tapply(data[,1],as.factor(data[,3]) * as.factor(data[,2]),mean)
data[,4] <-3*(as.numeric(as.factor(data[,2]))-1)+(as.numeric(as.factor(data[,3]))-1)
plot(data[,4])
data[,4] <-rep(1:6,each = 10)
plot(data[,4])
data[,4] <-rep(0:5,each = 10)
plot(data[,4])
plot(data[,4] %% 3)
plot(data[,4] %/% 3)
tapply(data[,1],as.factor(data[,4]),mean)
plot(c(0.5,1,2),c(7.98,16.77,26.14))
plot(c(0.5,1,2),c(13.23,22.70,26.06))
plot(c(0.5,1,2),c(7.98,16.77,26.14))
?t.test
t.test(extra ~ group, data = sleep)
plot(extra ~ group, data = sleep)
plot(len ~ data[,4], data = data)
plot(len ~ supp*dose, data = data)
plot(len ~ supp*dose, data = ToothGrowth)
plot(len ~ supp+dose, data = ToothGrowth)
plot(len ~ supp&dose, data = ToothGrowth)
plot(len ~ supp|dose, data = ToothGrowth)
plot(len ~ supp:dose, data = ToothGrowth)
library("lattice", lib.loc="C:/Program Files/R/R-3.1.0/library")
demo(package="lattice")
demo(panel,package="lattice")
demo(lattice,package="lattice")
singer
myData <- ToothGrowth
apply(myData[,2:3],2,cat)
junk <- apply(myData[,2:3],2,cat)
junk <- apply(myData[,2:3],1,cat)
junk <- apply(myData[,2:3],1,paste)
apply(myData[,2:3],2,paste)
apply(myData[,2:3],2,paste0)
apply(as.string(myData[,2:3],2,paste0)
apply(as.string(myData[,2:3](),2,paste0)
apply(as.string(myData[,2:3]),2,paste0)
myData <- ToothGrowth
myData$mainFactor <- interaction(myData$supp, myData$dose)
library("lattice", lib.loc="C:/Program Files/R/R-3.1.0/library")
demo(lattice,package="lattice")
xyplot(dose ~ len | mainFactor, data = myData, layout = c(2, 3),
xlab = "Height (inches)",
ylab = "Kernel Density\n with Normal Fit",
main = "Estimated Density",
)
xyplot(len ~ dose | mainFactor, data = myData, layout = c(3, 2),
xlab = "Height (inches)",
ylab = "Kernel Density\n with Normal Fit",
main = "Estimated Density",
)
xyplot(len ~ dose | mainFactor, data = myData, layout = c(2, 3),
xlab = "Height (inches)",
ylab = "Kernel Density\n with Normal Fit",
main = "Estimated Density",
)
xyplot(len ~ dose | mainFactor, data = myData, layout = c(2, 3),
xlab = "dosage",
ylab = "Tooth length",
main = "Tooth Length was dosage for\n OJ and vitamin C delivery systems",
)
xyplot(len ~ dose | mainFactor, data = myData, layout = c(2, 3),
xlab = "dosage",
ylab = "Tooth length",
main = "Tooth Length was dosage for\n OJ and vitamin C delivery systems",
)
xyplot(len ~ dose | mainFactor, data = myData, layout = c(2, 3),
xlab = "dosage (mg)",
ylab = "Tooth length (mm)",
main = "Tooth Length vs Dosage for\n OJ and ascorbic acid delivery systems",
)
xyplot(len ~ dose | mainFactor, data = myData, layout = c(2, 3),
xlab = "dosage (mg)",
ylab = "Tooth length (mm)",
main = "Guinea Pig Tooth Length vs Dosage for\n OJ and ascorbic acid delivery systems",
)
xyplot(len ~ dose | mainFactor, data = myData, layout = c(2, 3),
xlab = "Vitamin C dosage (mg)",
ylab = "Tooth Length (mm)",
main = "Guinea Pig Tooth Length vs Vitamin C Dosage for\n OJ and Ascorbic Acid Delivery Systems",
)
table(len,mainFactor, data=myData)
table(myData$len,myData$mainFactor)
table(apply(len,as.factor(mainFactor),mean,data=myData),myData$mainFactor)
table(apply(myData$len,as.factor(myData$mainFactor),mean),myData$mainFactor)
table(tapply(myData$len,as.factor(myData$mainFactor),mean),myData$mainFactor)
table(lapply(myData$len,as.factor(myData$mainFactor),mean),myData$mainFactor)
tapply(len,as.factor(mainFactor),mean,data=myData)
tapply(myData$len,as.factor(myData$mainFactor),mean)
tapply(myData$len,as.factor(myData$mainFactor),sd)/sqrt(10)
head(ToothGrowth)
subData <-myData[myData$dose == 0.5,]
t.test(subData$len ~ subData$supp,paired = FALSE, var.equal = TRUE)
t.test(subData$len ~ subData$supp,paired = FALSE, var.equal = TRUE)#coment
subData <-myData[myData$dose == 1,]
t.test(subData$len ~ subData$supp,paired = FALSE, var.equal = TRUE)#coment
subData <-myData[myData$dose == 2,]
t.test(subData$len ~ subData$supp,paired = FALSE, var.equal = TRUE)#coment
a <- c(140, 138, 150, 148, 135)
b <- c(132, 135, 151, 146, 130)
?t.test
t.test
t.test(a,b,alternative="two.sided")
qt(9,97.5)
?qt
qt(97.5,9)
qt(.975,9)
alpha = 0.05
z = qnorm(1-alpha)
pnorm(mu0 +z * sigma/sqrt(n),mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
mu0 = 30
mua = 32
sigma = 4
n = 16
pnorm(mu0 +z * sigma/sqrt(n),mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
pnorm(mu0 +z * sigma/sqrt(n),mean = mu0, sd = sigma/sqrt(n), lower.tail = FALSE)
pnorm(45 +z * sigma/sqrt(n),mean = mu0, sd = sigma/sqrt(n), lower.tail = FALSE)
pnorm(mu0 +z * sigma/sqrt(n),mean = 50, sd = sigma/sqrt(n), lower.tail = FALSE)
?pnorm
pnorm(0)
pnorm(0.5)
pnorm(0.75)
pnorm(2)
pnorm(3)
pnorm(4)
pnorm(mu0 +z * sigma/sqrt(n),mean = mu0, sd = sigma/sqrt(n), lower.tail = FALSE)
pnorm(mu0 +z * sigma/sqrt(n),mean = mua, sd = sigma/sqrt(n), lower.tail = FALSE)
z
a <- c(140, 138, 150, 148, 135)
b <- c(132, 135, 151, 146, 130)
t.test(a,b)
t.test(a,b,paired = TRUE)
install.packages("UsingR")
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
?lm
lm(y ~ 0 + x)
data(mtcars)
mtcars
lm(mpg ~ wt,data = mtcars)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
x[1]
(x[1]-mean(x))/sd(x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
mean(x)
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y ~ X)
lm(y ~ x)
a <- lm(y ~ x)
a
a.coefficients
a.coefficients()
summary(a)
mtcars
b <-lm(mpg ~ weight, data = mtcars)
b <- lm(mtcars.mpg ~ mtcars.weight)
b <- lm(mtcars$mpg ~ mtcars$weight)
data <- mtcars
b <- lm(data$mpg ~ data$weight)
b <-lm(mpg ~ wt, data = mtcars)
summary(b)
c <-lm(mpg ~ (wt - mean(wt)), data = mtcars)
c <-lm(mpg ~ (wt - mean(mtcars$wt)), data = mtcars)
summary(a)
1:10
1:10:3
1:3:10
list <- c(8,7,12,4,9,6,5)
1:3
for i in 1:length(list)  {i}
for (i in 1:length(list))  {i}
length(list)
for (i in 1:length(list))  {
i
}
for (i in 1:length(list))  {
print(i)
}
for (i in 1:length(list))  {
for(j in (i+1):length(list))  {
if(list[i] > list[j])  {
temp <-list[i]
list[i] <- list[j]
list[j] <- temp
}
}
}
list
list <- c(8,7,12,4,9,6,5)
for (i in 1:(length(list)-1)  {
for(j in (i+1):length(list))  {
if(list[i] > list[j])  {
temp <-list[i]
list[i] <- list[j]
list[j] <- temp
}
}
}
list
for (i in 1:(length(list)-1))  {
for(j in (i+1):length(list))  {
if(list[i] > list[j])  {
temp <-list[i]
list[i] <- list[j]
list[j] <- temp
}
}
}
list
summary(mtcars)
pairs(mtcars,panel = panel.smooth)
pairs(mtcars)
cov(mtcars)
cor(mtcars)
corgram(mtcars)
corrgram(mtcars)
library(corrgram)
install.packages("corrgram")
library(corrgram)
library(corrgram)
corrgram(mtcars)
lm(mpg~cyl, data = mtcars)
summary(lm(mpg~cyl, data = mtcars))
summary(lm(mpg~cyl, data = mtcars)$coef)
lm(mpg~cyl, data = mtcars)$coef
reddit
install.packages("shiny")
install.packages("shiny")
library(shiny)
runExample("01_hello")
title: "myApp"
library(shiny)
runApp("C:/Users/Steve/Documents/Coursera Documents/Data Products/theApp")
install.packages("alphahull")
# Random sample in the unit square
x <- matrix(runif(20), nc = 2)
# Delaunay triangulation and Voronoi diagram calculation
delvor.obj <- delvor(x)
library(alphahull)
# Random sample in the unit square
x <- matrix(runif(20), nc = 2)
# Delaunay triangulation and Voronoi diagram calculation
delvor.obj <- delvor(x)
plot(delvor.obj)
plot(delvor.obj, col = c(1,0,0,0))
plot(delvor.obj, col = c(1,1,0,0))
plot(delvor.obj, col = c(1,0,1,0))
# Random sample in the unit square
x <- matrix(runif(200), nc = 2)
# Delaunay triangulation and Voronoi diagram calculation
delvor.obj <- delvor(x)
plot(delvor.obj, col = c(1,0,1,0))
plot(delvor.obj, col = c(2,0,1,0))
plot(delvor.obj, col = c(2,0,7,0))
plot(delvor.obj, col = c(2,0,87,0))
plot(delvor.obj, col = c(2,0,8,0))
plot(delvor.obj, col = c(2,0,6,0))
plot(delvor.obj, col = c(3,0,6,0))
plot(delvor.obj, col = c(3,0,6,0),xlab = "x")
plot(delvor.obj, col = c(3,0,6,0),xlab = "x",ylab = 'y')
runApp("C:/Users/Steve/Documents/Coursera Documents/Data Products/theApp")
runApp("C:/Users/Steve/Documents/Coursera Documents/Data Products/theApp")
runApp("C:/Users/Steve/Documents/Coursera Documents/Data Products/theApp")
runApp("C:/Users/Steve/Documents/Coursera Documents/Data Products/theApp")
runApp("C:/Users/Steve/Documents/Coursera Documents/Data Products/theApp")
runApp("C:/Users/Steve/Documents/Coursera Documents/Data Products/theApp")
runApp("C:/Users/Steve/Documents/Coursera Documents/Data Products/theApp")
x <- 1:20
y <- runif(20)
plot(x,y,xaxt = "n")
axis(side = 1, at = x, labels = FALSE, tck = -0.01)
x <- 1:20
y <- runif(20)
plot(x,y,xaxt = "n")
x <- 1:20
y <- runif(20)
plot(x,y,xaxt = "n",yaxt = "n")
x <- 1:20
y <- runif(20)
plot(x,y,xaxt = "n",yaxt = "n",asp = 1)
runApp("C:/Users/Steve/Documents/Coursera Documents/Data Products/theApp")
runApp("C:/Users/Steve/Documents/Coursera Documents/Data Products/theApp")
runApp("C:/Users/Steve/Documents/Coursera Documents/Data Products/theApp")
runApp("C:/Users/Steve/Documents/Coursera Documents/Data Products/theApp")
str(delvor.obj)
h3("This is a description"),
h3("This is a description"),
runApp("C:/Users/Steve/Documents/Coursera Documents/Data Products/theApp")
runApp("C:/Users/Steve/Documents/Coursera Documents/Data Products/theApp")
runApp("C:/Users/Steve/Documents/Coursera Documents/Data Products/theApp")
runApp("C:/Users/Steve/Documents/Coursera Documents/Data Products/theApp")
runApp("C:/Users/Steve/Documents/Coursera Documents/Data Products/theApp")
runApp("C:/Users/Steve/Documents/Coursera Documents/Data Products/theApp")
runApp("C:/Users/Steve/Documents/Coursera Documents/Data Products/theApp")
runApp("C:/Users/Steve/Documents/Coursera Documents/Data Products/theApp")
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name='slotterback', token='629F3619C2654DF2271D26DA7A3B2EE1', secret='8SZRuNLynAPKn6/i7dXgWrxyMrlDjhkaOQ/apYvJ')
library(shinyapps)
shinyapps::deployApp("C:/Users/Steve/Documents/Coursera Documents/Data Products/theApp")
devtools::install_github('slidify','ramnathv')
getwd()
getdir()
ls()
memory()
mem()
ls
setwd("C:/Users/Steve/Documents/Coursera Documents/Data Products")
library(slidify)
author("myslides")
devtools::install_github('ramnathv\slidifyLibraries')
devtools::install_github('ramnathv/slidifyLibraries')
devtools::install_github('ramnathv/slidifyLibraries')
devtools::install_github('ramnathv/slidifyLibraries')
